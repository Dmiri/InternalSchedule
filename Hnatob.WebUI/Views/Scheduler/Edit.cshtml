@model Hnatob.Domain.Concrete.Event
@using Hnatob.Domain.Helper
@using Hnatob.Domain.Models
@using System.Collections.Generic;

@{ViewBag.Title = "Edit";}


@using (Html.BeginForm())
{
    @Html.AntiForgeryToken()

    <div class="form-horizontal">
        <h4>Event</h4>
        <hr />
        <div class="form-row">
            <div class="col-md-7">
                @Html.ValidationSummary(true, "", new { @class = "text-danger" })
                @Html.HiddenFor(model => model.Id)
                <div class="form-group">
                    @Html.LabelFor(model => model.Access, htmlAttributes: new { @class = "control-label" })
                    <div class="dropdown btn-group">
                        <input type="text" class="btn btn-info" placeholder="@Access.Private" value="@Access.Private" />
                        @*<button type="button" class="btn btn-primary">@Access.Private</button>*@
                        <button type="button" class="btn btn-primary dropdown-toggle dropdown-toggle-split" data-toggle="dropdown" aria-haspopup="true" aria-expanded="false">
                            <span class="sr-only">Toggle Dropdown</span>
                        </button>
                        <div class="dropdown-menu">
                            <a class="dropdown-item" href="#">@Access.Private</a>
                            <a class="dropdown-item" href="#">@Access.Public</a>
                        </div>
                    </div>
                </div>
                <div class="form-group">
                    @Html.LabelFor(model => model.Prefix, htmlAttributes: new { @class = "control-label" })
                    @Html.ValidationMessageFor(model => model.Prefix, "", new { @class = "text-danger" })
                    @Html.EditorFor(model => model.Prefix, new { htmlAttributes = new { @class = "form-control" } })
                </div>

                <div class="form-group">
                    @Html.LabelFor(model => model.Title, htmlAttributes: new { @class = "control-label" })
                    @Html.ValidationMessageFor(model => model.Title, "", new { @class = "text-danger" })
                    @Html.EditorFor(model => model.Title, new { htmlAttributes = new { @class = "form-control" } })
                </div>

                <div class="form-group">
                    @Html.LabelFor(model => model.Location, htmlAttributes: new { @class = "control-label" })
                    @Html.ValidationMessageFor(model => model.Location, "", new { @class = "text-danger" })
                    @Html.EditorFor(model => model.Location, new { htmlAttributes = new { @class = "form-control" } })
                </div>

                <div class="form-group">
                    @Html.LabelFor(model => model.Start, htmlAttributes: new { @class = "control-label" })
                    @Html.ValidationMessageFor(model => model.Start, "", new { @class = "text-danger" })
                    @Html.EditorFor(model => model.Start, new { htmlAttributes = new { @class = "form-control" } })
                </div>

                <div class="form-group">
                    @Html.LabelFor(model => model.Description, htmlAttributes: new { @class = "control-label" })
                    @Html.ValidationMessageFor(model => model.Description, "", new { @class = "text-danger" })
                    @Html.EditorFor(model => model.Description, new { htmlAttributes = new { @class = "form-control" } })
                </div>
            </div>
            @*---------------------------------------------------------------------------------------------------------------------*@
            <div class="col-md-5">
                @Html.Label("Responsibles:", new { @class = "control-label" })
                <div>
                    @Html.LabelFor(model => model.Producer, htmlAttributes: new { @class = "control-label" })
                    <div class="dropdown btn-group float-right">
                        <input type="text" class="btn btn-info btn-sm" placeholder="@EPosition.Producer.ToString()" value="@Model.Producer.ToString()" />
                        <button type="button" class="btn btn-primary btn-sm dropdown-toggle dropdown-toggle-split" data-toggle="dropdown" aria-haspopup="true" aria-expanded="false">
                            <span class="sr-only"></span>
                        </button>
                        <div class="dropdown-menu dropdown-menu-right">
                            @{
                                foreach (ModelForEvent item in ViewBag.Employees)
                                {
                                    if (item.Position == EPosition.Producer.ToString())
                                    {
                                        <label class="dropdown-item" href="#">@item.Name</label>
                                    }
                                }
                            }
                        </div>
                    </div>
                </div>
                <div>
                    @Html.LabelFor(model => model.Conductor, htmlAttributes: new { @class = "control-label" })
                    <div class="dropdown btn-group float-right">
                        <input type="text" class="btn btn-info btn-sm" placeholder="@EPosition.Conductor.ToString()" value="@Model.Conductor.ToString()" />
                        <button type="button" class="btn btn-primary btn-sm dropdown-toggle dropdown-toggle-split" data-toggle="dropdown" aria-haspopup="true" aria-expanded="false">
                            <span class="sr-only">Toggle Dropdown</span>
                        </button>
                        <div class="dropdown-menu dropdown-menu-right">
                            @{
                                foreach (ModelForEvent item in ViewBag.Employees)
                                {
                                    if (item.Position == EPosition.Conductor.ToString())
                                    {
                                        <label class="dropdown-item">@item.Name</label>
                                    }
                                }
                            }
                        </div>
                    </div>
                </div>
                <div>
                    @Html.LabelFor(model => model.Choirmaster, htmlAttributes: new { @class = "control-label" })
                    <div class="dropdown btn-group float-right">
                        <input type="text" class="btn btn-info btn-sm" placeholder="@Model.Choirmaster.ToString()" value="@Model.Choirmaster.ToString()" />
                        <button type="button" class="btn btn-primary btn-sm dropdown-toggle dropdown-toggle-split" data-toggle="dropdown" aria-haspopup="true" aria-expanded="false">
                            <span class="sr-only">Toggle Dropdown</span>
                        </button>
                        <div class="dropdown-menu dropdown-menu-right">
                            @{
                                foreach (ModelForEvent item in ViewBag.Employees)
                                {
                                    if (item.Position == EPosition.Choirmaster.ToString())
                                    {
                                        <label class="dropdown-item" href="#">@item.Name</label>
                                    }
                                }
                            }
                        </div>
                    </div>
                </div>
                <div>
                    @Html.LabelFor(model => model.Accompanist, htmlAttributes: new { @class = "control-label" })
                    <div class="dropdown btn-group float-right">
                        <input type="text" class="btn btn-info btn-sm" placeholder="@EPosition.Accompanist.ToString()" value="@Model.Accompanist.ToString()" />
                        <button type="button" class="btn btn-primary btn-sm dropdown-toggle dropdown-toggle-split" data-toggle="dropdown" aria-haspopup="true" aria-expanded="false">
                            <span class="sr-only">Toggle Dropdown</span>
                        </button>
                        <div class="dropdown-menu dropdown-menu-right">
                            @{
            foreach (ModelForEvent item in ViewBag.Employees)
            {
                if (item.Position == EPosition.Accompanist.ToString())
                {
                    <label class="dropdown-item" href="#">@item.Name</label>
}
}
                            }

                        </div>
                    </div>
                </div>
                <div>
                    @Html.LabelFor(model => model.LightingDesigner, htmlAttributes: new { @class = "control-label" })
                    <div class="dropdown btn-group float-right">
                        <input type="text" class="btn btn-info btn-sm" placeholder="@EPosition.LightingDesigner.ToString()" value="@Model.LightingDesigner.ToString()" />
                        <button type="button" class="btn btn-primary btn-sm dropdown-toggle dropdown-toggle-split" data-toggle="dropdown" aria-haspopup="true" aria-expanded="false">
                            <span class="sr-only">Toggle Dropdown</span>
                        </button>
                        <div class="dropdown-menu dropdown-menu-right">
                            @{
                                foreach (ModelForEvent item in ViewBag.Employees)
                                {
                                    if (item.Position == EPosition.LightingDesigner.ToString())
                                    {
                                        <label class="dropdown-item" href="#">@item.Name</label>
                                    }
                                }
                            }
                        </div>
                    </div>
                </div>
                <div>
                    @Html.LabelFor(model => model.SoundEngineer, htmlAttributes: new { @class = "control-label" })
                    <div class="dropdown btn-group float-right">
                        <input type="text" class="btn btn-info btn-sm" placeholder="@EPosition.SoundEngineer.ToString()" value="@Model.SoundEngineer.ToString()" />
                        <button type="button" class="btn btn-primary btn-sm dropdown-toggle dropdown-toggle-split" data-toggle="dropdown" aria-haspopup="true" aria-expanded="false">
                            <span class="sr-only">Toggle Dropdown</span>
                        </button>
                        <div class="dropdown-menu dropdown-menu-right">
                            @{
                                foreach (ModelForEvent item in ViewBag.Employees)
                                {
                                    if (item.Position == EPosition.SoundEngineer.ToString())
                                    {
                                        <label class="dropdown-item" href="#">@item.Name</label>
                                    }
                                }
                            }

                        </div>
                    </div>
                </div>

                <div>
                    @Html.CheckBoxFor(model => model.Orchestra, new { @class = "form-check-label" })
                    @Html.LabelFor(model => model.Orchestra, new { @class = "form-check-label" })
                </div>
                <div>
                    @Html.CheckBoxFor(model => model.Choir, new { @class = "form-check-label" })
                    @Html.LabelFor(model => model.Choir, new { @class = "form-check-label" })
                </div>
                <div>
                    @Html.CheckBoxFor(model => model.Mimic, new { @class = "form-check-label" })
                    @Html.LabelFor(model => model.Mimic, new { @class = "form-check-label" })
                </div>
            </div>
        </div>
        <div class="form-group">
            <div class="col-md-offset-2 col-md-10">
                @Html.ActionLink("Back to List", "Schedule", null, new { @class = "btn btn-default btn-dark" })
                <input type="submit" value="Save" class="btn btn-default" />
            </div>
        </div>
    </div>

}


@section scripts {
    <script type="text/javascript">
        $('.dropdown').on('show.bs.dropdown', function (e) {
            var value = this.querySelector('input.btn');
            var menu = this.querySelector('.dropdown-menu');
            var items = menu.querySelectorAll('.dropdown-item');

            for (var i = 0; i < items.length; ++i)
            {
                console.log(items[i]);
                items[i].addEventListener('click', function (event) { //e.children
                console.log(event);
                value.value = this.innerText;
                });
            }

            // do something…
        })


    </script>
}